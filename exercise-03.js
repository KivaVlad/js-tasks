// Реализовать аналог библиотеки Math (можно назвать MathX) с базовым набором функций, используя замыкания:
// - вычисление N-го числа в ряду Фибоначчи 
// - вычисление всех чисел в ряду Фибоначчи до числа N
// - вычисление N-го просто числа
// - вычисление всех простых чисел до числа N


const MathX = {
    // вычисление N-го числа в ряду Фибоначчи
    getNthFibonacci: function(num) {
        let a = 0;
        let b = 1;
        let result = 0;

        for (let i = 0; i < num; i++) {
            result = a;
            a += b;
            b += result;
        }

        return result;
    },

    // вычисление всех чисел в ряду Фибоначчи до числа N
    fibonacciNumbers: function(num) { 
        let a = 0;
        let b = 1;
        let result;
        let arrNums = [];

        for (let i = 0; i < num - 2; i++) {
            result = a + b;
            a = b;
            b = result;
            arrNums.push(result);
        }

        return arrNums.join(', ');
    },

    // вычисление N-го просто числа
    isPrimeNumber: function(num) {
        for (let i = 2; i < num; i++) {
            if (num % i === 0) {
                return false;
            }
        }
        return num !== 1;
    },

    // вычисление всех простых чисел до числа N
    primesNthNumbers: function(num) {
        let primeNums = [];

        for (let i = 2; i <= num; i++) {
            if (MathX.isPrimeNumber(i)) {
                primeNums.push(i);
            }
        }

        return primeNums.join(', ');
    }
}

console.log(MathX.getNthFibonacci(5));  // 8
console.log(MathX.fibonacciNumbers(5));  // 1, 2, 3
console.log(MathX.isPrimeNumber(5));  // true
console.log(MathX.primesNthNumbers(5));  // 2, 3, 5

// 1
// Вычисление N-го числа в ряду Фибоначчи: создаю переменные a и b со значениями 0 и 1. 
// Затем циклом for прохожу от 0 до числа num. На каждом этапе цикла функция складывает текущее 
// значение переменной a с текущим значением переменной b и сохраняет результат в переменной result. 
// Затем функция обновляет значения переменных a и b, добавляя к ним значение переменной result. 
// После завершения цикла функция возвращает последнее значение переменной result, которое является N-м членом Фибоначчи.

// 2
// Вычисление всех чисел в ряду Фибоначчи до числа N: создаю переменные a и b со значениями 0 и 1, переменную result и пустой массив.
// Затем начинается цикл for, который выполняется num - 2 раз. На каждом этапе цикла суммируем значения a и b и сохраняем в result.
// После каждого выполненного этапа переменную result добавляем в пустой массив. 
// В конце функции возвращается строка, содержащая все числа из массива.

// 3
// Вычисление N-го просто числа: циклом for перебираю все числа от 2 до заданного числа num. 
// Если найден делитель, который делит число num без остатка, то функция возвращает false (число является сложным). 
// Если после перебора всех чисел функция не нашла делителя, то она возвращает true (число является простым).

// 4
// Вычисление всех простых чисел до числа N: циклом for перебираю числа от 2 до num. Для каждого числа проверяется, 
// является ли оно простым числом с помощью функции isPrimeNumber(). Если число является простым, оно добавляется в массив primeNums. 
// В конце функция возвращаем массив с простыми числами до числа N в виде строки
